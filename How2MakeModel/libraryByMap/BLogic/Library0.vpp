\section {図書館システムへの要求}
\index{としょかんしすてむへのようきゅう@図書館システムへの要求}
以下の機能を持つ図書館システムを、ユースケースレベルの要求仕様としてモデル化することを考えよう。
\begin{enumerate}
\item 本を図書館の蔵書として追加、削除する。
\item 題名と著者と分野のいずれかで本を検索する。
\item 利用者が、蔵書を借り、返す。
\item 蔵書の追加・削除や、利用者への貸出・返却は職員が行う。
\item 利用者や職員の権限などは考慮しなくてよい。
\item 最大蔵書数は10000、利用者一人への最大貸出冊数は3冊とする。
\end{enumerate}

\subsection {VDM++のモジュール}
	\index{VDM++のもじゅーる@VDM++のモジュール}
VDM++は、オブジェクト指向仕様記述言語であると同時に、関数型言語の機能を持った仕様記述言語でもあるので、
モデルを作る際「オブジェクト指向」であることにこだわることはない。
一般に、関数型指向でモデルを作成した方が抽象度が高く、行数も少なくモデルを作成できることが多い。
オブジェクト指向モデルは、より詳細な、設計よりのモデル化に向いている。

そこで、まず、オブジェクト指向にこだわらないモデル化を考える。
しかし、VDM++のモジュール記述単位はクラスなので、図書館クラスをVDM++のモジュールとして考える。

\section{実行不可能な仕様}
	\index{じっこうふかのうなしよう@実行不可能な仕様}
図書館システムとしては、最初のモデル化なので、実行可能な陽仕様とはせず、
事後条件・事前条件・不変条件などを考えた実行不可能な形で陰仕様を記述する。

陰仕様は、実行はできないものの「仕様である」と言ってよい。
	\index{いんしよう@陰仕様}

\begin{vdm_al}
class 図書館0
--class 図書館0 is subclass of 図書館RD0
\end{vdm_al}
	\index{としょかん0@図書館0}

\subsection{型定義}
	\index{かたていぎ@型定義}
日本語仕様では、抽象的な意味の本と、図書館の蔵書として管理すべき個々の本が明確に区別されていない。
図書館では、同じ本を何冊か蔵書として持つことがあるので、
以下のモデルでは、著者や題名という属性を持つ本に対し、
管理対象となる個々の蔵書を蔵書IDから本への写(maplet)として定義し、
蔵書を蔵書IDから本への写像(map)とする。
蔵書型は、濃度(集合の要素数)が10000以下であるという不変条件を持つ。
	\index{ふへんじょうけん@不変条件}
ただし、10000という数は、ここで直接書くのではなく、仕様を読みやすくするためvalues句で定数定義を行うこととする。
	\index{ぞうしょIDからほんへのしゃぞう@蔵書を蔵書IDから本への写像}
	\index{map}
\begin{vdm_al}
types
public 蔵書 = map 蔵書ID to 本
inv w蔵書 == card dom w蔵書 <= v最大蔵書数;
\end{vdm_al}

型名の前の予約語publicは、オブジェクト外部からアクセスできるかどうかを示すもので、
publicの場合、名前がオブジェクト外に公開されていることを示す。
protectedの場合は、サブクラスのオブジェクトにのみ公開されていて、privateの場合だとクラス外には未公開であることを示す。

今後のモデル化で、項目が追加される可能性が強いので、本はレコード型として定義した。
	\index{ほんれこーどがた@本(レコード型)}

著者や題名や分野は文字型(char)の列(seq)である文字列(seq of char)とした。
	\index{char}\index{seq}\index{seq of char}
著者は、モデルを詳細化するに伴いオブジェクトとしてモデル化する可能性があるが、
ここでは単に文字列として管理することにしたわけである。

\begin{vdm_al}
public 本 ::
	f題名 : 題名
	f著者 : 著者
	f分野集合 : set of 分野;
public 題名 = seq of char;
public 著者 = seq of char;
public 分野 = seq of char;
\end{vdm_al}

蔵書を一意に識別するため、型として蔵書IDを定義する。
蔵書IDは、token型とする。
	\index{tokenがた@token型}
token型は、他と一意に識別できる型であるという性質を持つだけの「抽象的な定義」を行うのに便利な型である。
より詳細な仕様にしていく場合、token型を他のより具体的な型に詳細化していく。

\begin{vdm_al}
public 蔵書ID = token;
\end{vdm_al}

職員と利用者もtoken型として定義する。
職員も利用者も共に、今着目している機能では「存在している」こと以外に積極的な役割がないからである。
権限などの機能が導入された場合、より詳細に定義していく必要があるだろう。

\begin{vdm_al}
public 職員 = token ;
public 利用者 = token;
\end{vdm_al}

上記で、レコード型である本の欄(field)名の頭にfが付いているのは、VDM++の文法ではなく弊社における名前付け規則である。
	\index{なまえつけきそく@名前付け規則}
VDM++では、クラス名や型名あるいは後述する関数名などの、すべての識別子がユニークな名前を持たなければならないので、
重複が起こらないよう名前付け規則を定めた。

具体的には、以下のように決めた。

\begin{itemize}
\item レコード型の欄(フィールド)名は、先頭にfieldを表すfを付ける。
\item インスタンス変数名は、先頭にinstanceを表すiを付ける。
\item 定数名は、先頭にvaluesを表すvを付ける。
\item 局所的に使う識別子名は、先頭にwork areaを表すwを付ける。
	\footnote{localを表すlは、数字の1と間違いやすいので、作業用に局所的に使う名前といういう意味でwにした。}
\item 局所的に使う識別子名であっても、仮引数としてのパラメータ名は、先頭に「一つの」を表すaを付ける。
\end{itemize} 


\subsection{インスタンス変数定義}
	\index{いんすたんすへんすうていぎ@インスタンス変数定義}
蔵書IDから本への写像である蔵書をインスタンス変数として持つようにする。
濃度(集合の要素数)が10000以下であるという不変条件を持つ。
	\index{ふへんじょうけん@不変条件}
ただし、10000という数は、ここで直接書くのではなく、仕様を読みやすくするため、values句で定数定義を行うこととする。
初期値は空の写像である。

\begin{vdm_al}
instance variables
private i蔵書 : 蔵書 := {|->};
inv
  card dom i蔵書 <= v最大蔵書数;
\end{vdm_al}

上記で、domは写像型にあらかじめ定義された演算子で、
	\index{dom}
写像の定義域の集合を返す。
今の場合、蔵書IDの集合を返す。

cardは集合型の演算子で、濃度を返す。
	\index{card}

\subsection{定数定義}
	\index{ていすうていぎ@定数定義}
最大蔵書数10000冊と利用者への最大貸出数3冊を定義している。
通常のプログラミング言語とは異なり、VDM++は通常の定数定義以外に、関数やオブジェクトを定数として定義することができるが、
上級の話題なので、これ以上触れない。

\begin{vdm_al}
values
public v最大蔵書数 = 10000;
public v最大貸出数 = 3;
\end{vdm_al}
	\index{values}
  
\subsection{操作定義}
\subsubsection{蔵書を追加する}
	\index{ぞうしょをついかする@蔵書を追加する}
「本を図書館の蔵書として追加する」機能は、「蔵書を追加する」操作でモデル化する。

引数は追加する蔵書を表す蔵書型で、
事後条件(post)で、確かに蔵書が追加されたことを、関数「蔵書が追加されている」を呼び出して確認している。
		\index{post}
関数「蔵書が追加されている」については後述する。

事後条件が true となれば事後条件が満たされ、false であれば事後条件は満たされない。
事後条件は、どうなるかではなく、どうなっていて欲しいかを記述するものなので、要求仕様あるいは設計仕様の核心であると言ってよい。

事後条件では、引数、インスタンス変数、結果を表す予約後 RESULT を使うことができる。
	\index{RESULT}

操作の本体は is not yet specified という予約語で、まだ記述していないことを示している。
		\index{is not yet specified}
この部分を具体的に書けば実行可能な仕様となる。

事前条件(pre)は、操作が受け入れ可能な引数やインスタンス変数の条件を、true を返す論理式として記述する。
	\index{じぜんじょうけん@事前条件}
	\index{pre}
ここでは、追加する本を表す a追加本 が、すでに蔵書中に存在しないことを、関数「蔵書に存在しない」を使って確認している。
関数「蔵書に存在しない」についても後述する。

モデルをより詳細化していく場合、この事前条件を削除して、操作本体内でエラー処理仕様として記述していく必要がある。

事後条件
	\index{じごじょうけん@事後条件}
は、関数「蔵書が追加されている」に
インスタンス変数「i蔵書」やその旧値(識別子の後ろに'\textasciitilde'を付けると旧値を意味する)などを渡して判定している。
旧値(old value)は、操作が動く前の(すなわち、事前条件判定時の)インスタンス変数の値を示す。
今の場合、「\old{i蔵書}」は、インスタンス変数「i蔵書」の旧値であり、事前条件に出てくる「i蔵書」と同じ値を持つ。
事後条件に出てくる「i蔵書」は、蔵書が追加されたあとの「i蔵書」の値を示す。

\begin{vdm_al}
operations
public 蔵書を追加する : 蔵書 ==> ()
蔵書を追加する(a追加本) == is not yet specified
pre
	蔵書に存在しない(a追加本, i蔵書)
post
	蔵書が追加されている(a追加本, i蔵書, i蔵書~);
\end{vdm_al}

\subsubsection{蔵書を削除する}
	\index{ぞうしょをさくじょする@蔵書を削除する}
「本を図書館の蔵書として削除する」機能は、「蔵書を削除する」操作でモデル化する。
「蔵書を追加する」操作の場合と同様に、関数「蔵書に存在する」といった、日本語仕様風の関数を呼ぶことで、仕様の読みやすさを向上させる。
\footnote{仕様の行数はやや多くなるが、VDM++にあまり詳しくない人でも一応理解できることが重要である。}

貸出している本を蔵書から削除するわけにはいかないので、「貸出に存在しない」ことを事前条件で確認しておく。

\begin{vdm_al}
public 蔵書を削除する: 蔵書 ==> ()
蔵書を削除する(a削除本) == is not yet specified
pre 
	蔵書に存在する(a削除本, i蔵書) and 
	貸出に存在しない(a削除本, i貸出)
post
	蔵書が削除されている(a削除本, i蔵書, i蔵書~);
\end{vdm_al}

\subsubsection{題名と著者と分野で本を検索する}
	\index{ほんをけんさくする@本を検索する}
「題名と著者と分野で本を検索する」機能は、「本を検索する」操作でモデル化する。

「本を検索する」操作の事後条件は、予約語RESULTで表されている返り値の蔵書中で、
引数「a検索キー」で指定された文字列が、題名、著者、分野のいずれかの文字列と一致することである。

forall 以下は、全称限量式と呼ばれ、
	\index{forall}
in set
	\index{in set}
の後の式で表される集合(今の場合、返り値を表すRESULTの値域、すなわち本の集合)の
要素(いまの場合本を表すbook)全てについて、
\&以下の条件が成り立てば true、そうでなければ false を返す式である。
この全称限量式が true であれば事後条件が満たされ、 false であれば事後条件違反になる。

book.f題名といった記法は、本の集合の要素であるbookレコードの欄(フィールド)を示す。
	\index{ふぃーるど@フィールド}

\begin{vdm_al}
public 本を検索する: (題名 | 著者 | 分野) ==> 蔵書
本を検索する(a検索キー) ==  is not yet specified
pre
	検索キーが空でない(a検索キー)
post
	forall book in set rng RESULT & 
		(book.f題名 = a検索キー or 
		book.f著者 = a検索キー or 
		a検索キー in set book.f分野集合);
\end{vdm_al}

\subsubsection{本を貸す}
	\index{ほんをかす@本を貸す}
「本を貸す」を記述するには、型定義とインスタンス変数の定義が必要になる。

まず、貸出という型を、利用者から蔵書への1対1写像として定義する。
蔵書は蔵書IDから本への写像であったから、貸出は inmap 利用者 to (蔵書ID to 本)　ということになる。
	\index{inmap}
そして、その型のインスタンス変数「i貸出」を定義する。
「i貸出」に含まれる蔵書は、図書館の蔵書でなければならないので、
インスタンス変数の不変条件として「蔵書に存在する」ことを確認しておく。
ここでは、「蔵書に存在する」関数を呼び出すことで確認する。

「i貸出」写像に、写像の値域の集合を取り出す写像型演算子 rng を適用することで、
「i貸出」写像の値域の蔵書の集合（蔵書は写像型なので写像の集合になる）を返すので、
その写像の集合に、写像の分配的併合演算子 merge を適用することで、
写像の集合に含まれる、すべての写（写像の個々の要素を写と呼ぶ。）を持つ写像を得る。
この写像が「i蔵書」の一部であれば蔵書に存在することになり、「蔵書に存在する」関数がそれを判定する。

このように、VDM++では、types や instance variables の定義は1箇所で定義する必要はなく、必要なときに何回でも定義してよい。
他にも、values や operations あるいは functions の定義も、何回行ってもよい。

\begin{vdm_al}
types
public 貸出 = inmap 利用者 to 蔵書;

instance variables
i貸出 : 貸出 := {|->};
--inv 蔵書に存在する(merge rng i貸出, i蔵書);
\end{vdm_al}

\subsubsection{本を貸す}
「本を貸す」操作は職員型の引数を持つが、仕様内部では使わないため、仮引数に'-'(don’t-care 記号)というパターンを記述し、仮引数が存在することだけを強調する。
職員を使わないのは、現在の仕様が、まだそこまで詳細化する必要がないと判断したためである。

\begin{vdm_al}
operations
public 本を貸す: 蔵書 * 利用者 * 職員 ==> ()
本を貸す(a貸出本, a利用者, -) ==  is not yet specified
pre
	貸出可能である(a利用者, a貸出本, i貸出, i蔵書, v最大貸出数)
post
	貸出に追加されている(a貸出本, a利用者, i貸出, i貸出~);
\end{vdm_al}

\subsubsection{本を返す}
	\index{ほんをかえす@本を返す}

\begin{vdm_al}
operations
public 本を返す: 蔵書 * 利用者 * 職員 ==> ()
本を返す(a返却本, a利用者, -) ==  is not yet specified
pre
	貸出に存在する(a返却本, i貸出)
post 
	貸出から削除されている(a返却本, i貸出, i貸出~);
\end{vdm_al}

\subsection{関数定義}
\subsubsection{蔵書が追加されている}
	\index{ぞうしょがついかされている@蔵書が追加されている}
蔵書が追加されているかを bool 型、すなわち true か false を返すことで判定する関数である。
	\index{bool}

関数は、操作と異なりインスタンス変数にアクセス出来ない。
引数を受け取り、計算結果を返り値として返すだけである。
インスタンス変数という大域変数(グローバル変数)にアクセスしないため、副作用を避ける事ができ、安全性が高い。
	\index{たいいきへんすう@大域変数}
	\index{ぐろーばるへんすう@グローバル変数}

引数で渡された図書館蔵書旧値と追加する本「a追加本」の2つの写像を併合したものが、図書館蔵書の蔵書の写像と等しいと true を返す。
旧値は、この関数を呼び出した操作が実行する前の値であることを示す。
VDM++では、名前の後ろに'\textasciitilde'を付けると旧値を意味するが、ここでの「a図書館蔵書旧値」は、呼び出し側の操作の旧値を表し、
この関数の旧値を表すわけではないので、'\textasciitilde'記号は使えない。

\begin{vdm_al}
functions
蔵書が追加されている : 蔵書 * 蔵書 * 蔵書 +> bool
蔵書が追加されている(a追加本, a図書館蔵書, a図書館蔵書旧値) ==
	a図書館蔵書 = a図書館蔵書旧値 munion a追加本;
\end{vdm_al}

\subsubsection{蔵書が削除されている}
	\index{ぞうしょがさくじょされている@蔵書が削除されている}
ここで、"\textless-:"は、定義域削減演算子である。
これは、左辺の集合(定義域)をもつ右辺の写像の要素(写という)を削除した写像を返す。
今の場合、「\Dom a削除本」が定義域の蔵書IDの集合を返すので、要するに「削除する蔵書IDの集合に対応する写像を削除する」ことになる。

\begin{vdm_al}
蔵書が削除されている : 蔵書 * 蔵書 * 蔵書 +> bool
蔵書が削除されている(a削除本, a図書館蔵書, a図書館蔵書旧値) ==
	a図書館蔵書 = dom a削除本 <-: a図書館蔵書旧値;
\end{vdm_al}

\subsubsection{蔵書に存在する}
	\index{ぞうしょにそんざいする@蔵書に存在する}
「a追加本」の定義域集合の要素である蔵書IDが、a図書館蔵書の定義域集合の要素であれば、true を返す。

\begin{vdm_al}
蔵書に存在する : 蔵書 * 蔵書 +> bool
蔵書に存在する(a追加本, a図書館蔵書) ==
	exists id in set dom a追加本 & id in set dom a図書館蔵書;
	--dom a追加本 subset dom a図書館蔵書;
\end{vdm_al}

\subsubsection{蔵書に存在しない}
	\index{ぞうしょにそんざいしない@蔵書に存在しない}

\begin{vdm_al}
蔵書に存在しない : 蔵書 * 蔵書 +> bool
蔵書に存在しない(a追加本, a図書館蔵書) ==
	not 蔵書に存在する(a追加本, a図書館蔵書) ;
\end{vdm_al}

\subsubsection{貸出に追加されている}
	\index{かしだしについかされていない@貸出に追加されている}

\begin{vdm_al}
貸出に追加されている : 蔵書 * 利用者 * 貸出 * 貸出 +> bool
貸出に追加されている(a貸出本, a利用者, a貸出, a貸出旧値) ==
	if a利用者 in set dom a貸出 then
		a貸出 = a貸出旧値 ++ {a利用者 |-> (a貸出(a利用者) munion a貸出本)}
	else
		a貸出 = a貸出旧値 munion {a利用者 |-> a貸出本};
\end{vdm_al}

\subsubsection{貸出から削除されている}
	\index{かしだしからさくじょされている@貸出から削除されている}

\begin{vdm_al}
貸出から削除されている : 蔵書 * 貸出 * 貸出 +> bool
貸出から削除されている(a削除本, a貸出, a貸出旧値) ==
	貸出に存在する(a削除本, a貸出旧値) and
	貸出に存在しない(a削除本, a貸出);
\end{vdm_al}

\subsubsection{貸出に存在する}
	\index{かしだしにそんざいする@貸出に存在する}

\begin{vdm_al}	
貸出に存在する : 蔵書 * 貸出 +> bool
貸出に存在する(a貸出本, a貸出) == 
	let	w蔵書 = merge rng a貸出 in
	exists id in set dom a貸出本 & id in set dom w蔵書;
	--dom a貸出本 subset dom w蔵書;
\end{vdm_al}

\subsubsection{貸出に存在しない}
	\index{かしだしにそんざいしない@貸出に存在しない}

\begin{vdm_al}
貸出に存在しない : 蔵書 * 貸出 +> bool
貸出に存在しない(a貸出本, a貸出) ==
	not 貸出に存在する(a貸出本, a貸出);
\end{vdm_al}

\subsubsection{貸出可能である}
	\index{かしだしかのうである@貸出可能である}
貸出可能であるとは、貸し出し予定の本が蔵書に存在し、貸し出されておらず、
利用者の最大貸出数を超えて貸し出されていない、ということを確認している。

\begin{vdm_al}
public 貸出可能である : 利用者 * 蔵書 * 貸出 * 蔵書 * nat1 +> bool
貸出可能である(a利用者, a貸出本, a貸出, a図書館蔵書, a最大貸出数) ==
	蔵書に存在する(a貸出本, a図書館蔵書) and
	貸出に存在しない(a貸出本, a貸出) and
	最大貸出数を超えていない(a利用者, a貸出本, a貸出, a最大貸出数);
\end{vdm_al}

\subsubsection{貸出可能でない}
	\index{かしだしかのうでない@貸出可能でない}

\begin{vdm_al}
public 貸出可能でない : 利用者 * 蔵書 * 貸出 * 蔵書 * nat1 +> bool
貸出可能でない(a利用者, a蔵書, a貸出, a図書館蔵書, a最大貸出数) ==
	not 貸出可能である(a利用者, a蔵書, a貸出, a図書館蔵書, a最大貸出数);
\end{vdm_al}

\subsubsection{最大貸出数を超えていない}
	\index{さいだいかしだしすうをこえていない@最大貸出数を超えていない}
\begin{vdm_al}
public 最大貸出数を超えていない : 利用者 * 蔵書 * 貸出 * nat1  +> bool
最大貸出数を超えていない(a利用者, a貸出本, a貸出, a最大貸出数) ==
	if a利用者 not in set dom a貸出 then
		card dom a貸出本 <= a最大貸出数
	else
		card dom a貸出(a利用者) + card dom a貸出本 <= a最大貸出数;
\end{vdm_al}

\subsubsection{検索キーが空でない}
	\index{けんさくきーがくうでない@検索キーが空でない}

\begin{vdm_al}
public 検索キーが空でない : 題名 | 著者 | 分野 +> bool
検索キーが空でない(a検索キー) == a検索キー <> "";
\end{vdm_al}

\begin{vdm_al}
end 図書館0
\end{vdm_al}