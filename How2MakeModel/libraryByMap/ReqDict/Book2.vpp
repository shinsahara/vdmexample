\section{本}
	\index{ほん@本}
今までレコード型で定義していた本は、「本」クラスのインスタンス変数である著者と題名として定義した。

クラス名と同名の操作「本」は、構成子
	\index{こうせいし@構成子}
と呼ばれる特殊な操作で、
new式
	\index{newしき@new式}
で呼び出すことで本のインスタンスを定義する。
返値はクラス名でなければならないので、self式
	\index{selfしき@self式}
を使って自分自身(このクラスのインスタンス)を返すようにしている。

構成子の中で、多重代入文atomic
	\index{たじゅうだいにゅうぶん@多重代入文}
	\index{atomic}
を使用している。
多重代入文は、指定されている文が、一つの文であるかのように評価・実行される\footnote{原子的であるという。}。
したがって、一連の文の評価・実行に副作用が無い
	\index{ふくさようがない@副作用が無い}
\footnote{実行順序によって結果が変わることがない。}ことを期待する場合は、多重代入文を用いる。
インスタンス変数に不変条件が指定されている場合、2つ以上のインスタンス変数に関わる不変条件があると、
片方のインスタンス変数に値を設定した瞬間、不変条件を満たさなくなることがある。
このような、事態を避けるため、構成子の定義では通常多重代入文を用いる。

インスタンス変数の値を参照したり、値を設定する操作を用意するのが、
オブジェクト指向の定石であるので、ここでは、本の題名を得る()操作を定義した。

\begin{vdm_al}
class 本
types
public 題名 = seq of char;

instance variables
private i題名 : 題名 := "未定義";
private i著者 : 著者 := new 著者();
private i分野集合 : set of 分野 := {};

operations
public 本: 著者 * 題名 * set of 分野 ==> 本
本(a著者, a題名, a分野集合) == (
    i著者 := a著者;
    i題名 := a題名;
    i分野集合 := a分野集合
);

public 題名を得る : () ==> 題名
題名を得る() == return i題名;

public 著者を得る : () ==> 著者
著者を得る() == return i著者;

public 分野集合を得る : () ==> set of 分野
分野集合を得る() == return i分野集合;

end 本
\end{vdm_al}