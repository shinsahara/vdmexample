\subsubsection {特急券予約システムクラス}
	\index{とっきゅうけんよやくしすてむ@特急券予約システム}
	\label{ExpressReservationSystem}
	\addcontentsline{toc}{section}{特急券予約システムクラス}

最初に、業務論理階層の仕様である特急券予約システムクラスの仕様を記述するが、
まず、クラスが果たすべき責任(responsibility\footnote{責務と訳すこともある。})を記述することで、
属性(インスタンス変数)や、機能(操作と関数)を決定する判断基準とする。
このような基準で記述したクラスは、再利用性や保守性を満たす可能性が大きい。

\paragraph {責任}
特急券予約システムの主要機能を、要求辞書階層で定義されたクラスや型あるいは操作や関数を使用して、構造化日本語仕様と言える形のVDM++で記述する。

\paragraph {クラス定義と構成子定義}
本クラスのスーパークラス「特急券予約DomainData」は、
特急券予約に関するドメインデータ(今の場合、インスタンス変数「s予約表」)を定義している。

構成子「特急券予約システム」は、予約表をパラメータとして受け取り、
特急券予約システムクラスのインスタンスを生成する。

\begin{vdm_al}
class 特急券予約システム is subclass of 特急券予約DomainData 

operations
public 特急券予約システム : 予約表 ==> 特急券予約システム
特急券予約システム(a予約表) ==  (
	s予約表 := a予約表
);
\end{vdm_al}

\paragraph {操作：予約する}
	\index{よやくする@予約する}
	\label{Reserve}
「特急券予約DomainData」のスーパークラスであり、
本クラスのスーパークラスでもある、
要求辞書階層の「特急券予約Domain」クラスの関数
「予約表を更新する」と「予約表に追加する」を呼び出して、予約を行う。

\begin{vdm_al}
public 予約する :  契約 * ID * クレジットカード * 特急券予約`予約内容 ==> 特急券予約
予約する(a契約, anID, aクレジットカード, a予約内容) == (
	def w特急券予約 = new 特急券予約(anID, aクレジットカード, a予約内容) in (
	if 予約がある契約である(a契約, s予約表) then
		s予約表 := 予約表を更新する(s予約表, a契約, w特急券予約)
	else
		s予約表 := 予約表に追加する(s予約表, a契約, w特急券予約);
	return w特急券予約
	)
)
post
	if 予約がある契約である(a契約, s予約表~) then
		予約表が更新されている(s予約表~, a契約, RESULT, s予約表)
	else
		予約表に追加されている(s予約表~, a契約, RESULT, s予約表);
\end{vdm_al}

\paragraph {操作：特急券を得る}
	\index{とっきゅうけんをえる@特急券を得る}
クレジットカードで特急券を得る。
「特急券を得る」ことは、予約内容を返すということで抽象化した。

\begin{vdm_al}
public 特急券を得る : ID * クレジットカード ==> 特急券予約`予約内容
特急券を得る(anID, aクレジットカード) == (
	def w予約 = 予約を得る(s予約表, anID, aクレジットカード) in
	return w予約.予約内容を得る()
)
pre
	let w予約 = 予約を得る(s予約表, anID, aクレジットカード) in
	aクレジットカード = w予約.クレジットカードを得る();
\end{vdm_al}

\paragraph {操作：特急券を得る}
	\index{とっきゅうけんをえる@特急券を得る}
予約会員証で特急券を得ることもできるので、
前に記述したクレジットカードを使う「特急券を得る」操作のオーバーロード操作
\footnote{オーバーロード (overload)とは、同一の名前の関数や操作を複数定義し、
使用時に文脈に応じて選択することで複数の動作を行わせる仕組みである。}
を定義する。

\begin{vdm_al}
public 特急券を得る : ID * 予約会員証 ==> 特急券予約`予約内容
特急券を得る(anID, a会員証) == (
	def w予約 = 予約を得る(s予約表, anID, a会員証) in
	return w予約.予約内容を得る()
)
pre
	let w予約 = 予約を得る(s予約表, anID, a会員証) in
	a会員証.クレジットカードを得る() = w予約.クレジットカードを得る();
\end{vdm_al}

\paragraph {操作：クレジットカードを切り替える}
	\index{くれじっとかーどをきりかえる@クレジットカードを切り替える}
実システムでは、本操作を一般ユーザーが使うことはできず、鉄道会社Aサポートセンターの担当者だけが使えるが、
本モデルでは、誰がある操作を行えるかのチェックは捨象して対象外としている。

\begin{vdm_al}
public クレジットカードを切り替える : 契約 * クレジットカード ==> ()
クレジットカードを切り替える(a契約, a新しいクレジットカード) ==
	a契約.会員証を得る().クレジットカードを設定する(a新しいクレジットカード);

end 特急券予約システム
\end{vdm_al}

以下の表は、VDMToolsが生成したVDM++仕様実行時のVDM++の命令レベルで
何\%実行したかを表すカバレージ情報である。

\begin{rtinfo}
[TotalxCoverage]{vdm.tc}[特急券予約システム]
\end{rtinfo}

命令レベルのコードカバレージとは、各式や文を実行したか否かを表し、
	\index{こーどかばれーじめいれいれべる@コードカバレージ(命令レベル)}
ループや分岐によって生じるすべての組合せが実行されたことは保証されないが、
通常、95\%以上のカバレージが達成されていれば、
ほぼ信頼できる品質であることが分かっている。

Nameカラムは関数ないし操作の名前、
\#Callsカラムは呼び出し回数、
Coverageカラムは各関数あるいは操作内の命令の何\%を実行したかを表す。
Coverageがチェックマークの場合は、100\%実行したことを表す。