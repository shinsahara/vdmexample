class 運賃表

types --型定義
public 駅 = seq of char --文字型の列、すなわち文字列。ここでは、駅型が文字列であると定義する。publicは、どのクラスからもアクセスできることを示す。
inv w駅 == w駅 <> ""; -- inv以下の不変条件定義で、駅型が空文字列ではないことを定義する。セミコロン';'は、文法要素の区切り記号である。
public 運賃 = nat; -- 運賃が自然数型であることを定義する。
public 運賃レコード :: -- f駅1とf駅2とf運賃を項目（欄, fieldとも言う）として持つレコード型「運賃レコード」を定義する。
	f駅1 : 駅	--欄名の先頭のfは、他の識別子と区別をするために付けている。VDM++では、識別子がモデル内でユニークでならないため、このような名付規則を決めたほうが良い。
	f駅2 : 駅
	f運賃 : 運賃 --ここは、不変条件定義のinvが続くため、セミコロンを付けると構文エラーになる。
inv --駅1と駅2が異なることを、型不変条件で示している。
	w運賃レコード == w運賃レコード.f駅1 <> w運賃レコード.f駅2;
public 運賃表集合 = set of 運賃レコード -- 運賃表集合型が、運賃レコード型のデータの集合であることを示す。集合は、順序がなく、重複がないものの集まりである。
inv w運賃表集合 == -- 型の不変条件invの後の識別子名は、型の値を表す名前で、 "==" の後の式中で使う。
	w運賃表集合 = {} or -- {}は空集合を表す。
	forall w運賃レコード1, w運賃レコード2 in set w運賃表集合 & -- forallは全称限量式で、w運賃表集合の要素、w運賃レコード1とw運賃レコード2が、'&'の後の条件式を満たす事を示す。
		w運賃レコード1.f駅1 = w運賃レコード2.f駅1 and -- ここでは、w運賃表集合で駅1と駅2が等しければ、運賃も等しいことを示す。
		w運賃レコード1.f駅2 = w運賃レコード2.f駅2 => -- "=>"は、bool型の「含意」演算子で、a => b は、not a or b と等しい。
			w運賃レコード1.f運賃 = w運賃レコード2.f運賃;
/*	上の全称限量式は、以下の様な運賃表の集合列挙式の定義を、型エラーとして検出するために記述した。
	{mk_運賃表`運賃レコード("東京", "新宿", 180),
	 mk_運賃表`運賃レコード("新宿", "品川", 190),
	 mk_運賃表`運賃レコード("新宿", "品川", 300)
  };
*/

instance variables
public s運賃集合 : set of 運賃レコード := { --運賃レコードの集合
	mk_運賃レコード("東京", "品川", 220), 
	mk_運賃レコード("東京", "新宿", 180),
	mk_運賃レコード("新宿", "品川", 190),
	mk_運賃レコード("新宿", "品川", 170)
};

operations
public 運賃表を得る: 運賃 * 運賃 ==>  set of 運賃レコード
運賃表を得る(a運賃1, a運賃2) == 
	return {e | e in set s運賃集合 & e.f運賃 >= a運賃1 and e.f運賃 <= a運賃2}
pre	
	a運賃1 <= a運賃2
post
	RESULT = {e | e in set s運賃集合 & e.f運賃 >= a運賃1 and e.f運賃 <= a運賃2};

end 運賃表