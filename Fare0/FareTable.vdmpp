\section {運賃表クラス}
\index{うんちんひょう@運運賃表}
要求辞書レベルの運賃表と、関連する機能を表す。

この部分はTeXドキュメントであり、ツールの清書機能を使って、VDM++ソースと一体化したドキュメントを清書し、PDFファイルとして生成することができる。

\begin{vdm_al}
class 運賃表 --運賃表クラスを定義する。

types --型定義
public 駅 = seq of char --文字型の列、すなわち文字列。ここでは、駅型が文字列であると定義する。publicは、どのクラスからもアクセスできることを示す。
inv w駅 == w駅 <> ""; -- inv以下の不変条件定義で、駅型が空文字列ではないことを定義する。セミコロン';'は、文法要素の区切り記号である。
public 運賃 = nat; -- 運賃が自然数型であることを定義する。
public 運賃レコード :: -- f駅1とf駅2とf運賃を項目（欄, fieldとも言う）として持つレコード型「運賃レコード」を定義する。
	f駅1 : 駅	--欄名の先頭のfは、他の識別子と区別をするために付けている。VDM++では、識別子がモデル内でユニークでなければならないため、このような名付規則を決めたほうが良い。
	f駅2 : 駅
	f運賃 : 運賃 --ここは、不変条件定義のinvが続くため、セミコロンを付けると構文エラーになる。
inv --駅1と駅2が異なることを、型不変条件で示している。
	w運賃レコード == w運賃レコード.f駅1 <> w運賃レコード.f駅2;
public 運賃表集合 = set of 運賃レコード -- 運賃表集合型が、運賃レコード型のデータの集合であることを示す。集合は、順序がなく、重複がないものの集まりである。
inv w運賃表集合 == -- 型の不変条件invの後の識別子名は、型の値を表す名前で、 "==" の後の式中で使う。
	w運賃表集合 = {} or -- {}は空集合を表す。
	forall w運賃レコード1, w運賃レコード2 in set w運賃表集合 & -- forallは全称限量式で、w運賃表集合の要素、w運賃レコード1とw運賃レコード2が、'&'の後の条件式を満たす事を示す。
		w運賃レコード1.f駅1 = w運賃レコード2.f駅1 and -- ここでは、w運賃表集合で駅1と駅2が等しければ、運賃も等しいことを示す。
		w運賃レコード1.f駅2 = w運賃レコード2.f駅2 => -- "=>"は、bool型の「含意」演算子で、a => b は、not a or b と等しい。
			w運賃レコード1.f運賃 = w運賃レコード2.f運賃;
/*	上の全称限量式は、以下の様な運賃表の集合列挙式の定義を、型エラーとして検出するために記述した。
	{mk_運賃表`運賃レコード("東京", "新宿", 180),
	 mk_運賃表`運賃レコード("新宿", "品川", 190),
	 mk_運賃表`運賃レコード("新宿", "品川", 300)
  };
*/

functions --関数定義。関数は、引数だけを入力として返り値を計算するので、他の関数の影響を受けない。
\end{vdm_al}

\subsection {運賃表を検索する}
\index{うんちんひようをけんさくする@運賃表を検索する}
運賃表集合に存在するか判定する。
\begin{vdm_al}
protected 運賃表を検索する : 運賃表集合 * 駅 * 駅 -> 運賃レコード --関数「運賃表を検索する」の関数名と引数の型と返値の型を示す。protectedはサブクラスからのみアクセスできることを示す。
運賃表を検索する(a運賃表集合, a駅1, a駅2) == --関数「運賃表を検索する」の、仮引数を示す。
	let w運賃レコード in set a運賃表集合 be st -- let be st式で、a運賃表集合の要素で、次の行の条件式を満たす値が「w運賃レコード」に束縛される。
		{a駅1, a駅2} = {w運賃レコード.f駅1, w運賃レコード.f駅2} --駅1と駅2の集合が、a運賃表集合の駅1と駅2の集合と等しい「w運賃レコード」が得られる。
	in 
	w運賃レコード --得られた「w運賃レコード」が、この関数の返り値となる。
pre -- preは、関数の事前条件であり、次の事前条件式がtrueを返さねばならない。関数の場合、事前条件は受け入れ可能な引数であることを保証する。
	運賃表集合に存在する(a運賃表集合, a駅1, a駅2)
post -- postは関数の事後条件で、次の事後条件式が、関数実行後の状態を示す条件式であり、trueを返さねばならない。
	exists1 w運賃レコード in set a運賃表集合 & --exists1は「1存在限量式」で、a運賃表集合の要素で'&'の後の条件式を満たす唯1つの要素「w運賃レコード」が存在することを主張する。
		{a駅1, a駅2} = {w運賃レコード.f駅1, w運賃レコード.f駅2} and
		RESULT = w運賃レコード; -- RESULTは、事後条件式の中だけで使える予約後で、返り値の値を示す。
\end{vdm_al}

\subsection {運賃表集合に存在する}
\index{うんちんひようしゆうごうにそんざいする@運賃表集合に存在する}
運賃表集合に存在するか判定する。

\begin{vdm_al}
protected 運賃表集合に存在する : 運賃表集合 * 駅 * 駅 -> bool
運賃表集合に存在する(a運賃表集合, a駅1, a駅2) == 
	{a駅1, a駅2} in set {{e.f駅1, e.f駅2} | e in set a運賃表集合}; -- in set は、集合型の演算子で、左辺の要素が右辺の集合の要素であればtrueを返す。
	--{{e.f駅1, e.f駅2} | e in set a運賃表集合 & {a駅1, a駅2} = {e.f駅1, e.f駅2}} <> {}; --上の行と同じ結果を返す式
	-- {{e.f駅1, e.f駅2} | e in set a運賃表集合}は、'&'の後の条件式が無い形の集合内包式。
	-- a運賃表集合の要素をeとして、{e.f駅1, e.f駅2}を要素とする集合を返す。
	-- 両側の{}は集合を表し、'|'は分離記号である。
	-- '{'と'|'の間に、集合の要素となる式を書き、'|'と'}'の間に集合の要素の元となる集合を記述する。
	-- ここで出てくる in set は集合の演算子ではなく、e in set S の形式で、eが集合Sの要素であることを示す。
	-- 集合の内包式は、集合に含む要素が満たすべき条件式も記述することができるが、ここでは説明しない。

end 運賃表 --運賃表クラスの定義がここで終わることを示す。
\end{vdm_al}

\begin{rtinfo}
{vdm.tc}[運賃表]
\end{rtinfo}