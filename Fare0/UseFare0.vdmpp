\section {組み合わせテストケースUseFare0}
\index{くみあわせてすとけす@組み合わせテストケース}
運賃計算検証用の組み合わせテストである。

組み合わせテスト自体は、まだ入門コースであるため説明しない。

\begin{vdm_al}
class UseFare0

values --定数の定義
v運賃レコード集合 : 運賃表`運賃表集合 = { -- 「運賃表`運賃表集合」は、運賃表クラスの運賃表集合を示す。
	mk_運賃表`運賃レコード("東京", "品川", 220),
	mk_運賃表`運賃レコード("東京", "新宿", 180),
	mk_運賃表`運賃レコード("新宿", "品川", 190)
};

instance variables
s運賃計算 : 運賃計算 := new 運賃計算(v運賃レコード集合);

traces --以下が、組み合わせテストであることを示す。文法が、通常のVDM++ソースと多少異なる。
T1: 
	let w駅1 in set {"東京", "品川", "新宿"} in -- w駅1は{"東京", "品川", "新宿"}のいずれか、
	let w駅2 in set {"東京", "品川", "新宿", "武蔵境", ""} in  -- w駅2は{"東京", "品川", "新宿", "武蔵境", ""}のいずれか、
	s運賃計算.運賃を得る(w駅1, w駅2) -- {w駅1, w駅2}の組み合わせ全てについて「運賃を得る」を実行する。
	/*
	let w駅1 in set {"東京", "品川", "新宿"} in ... は、普通のVDM++構文では、w駅1に{"東京", "品川", "新宿"}のうちどれか1つが束縛され、
	let w駅2 in set {"東京", "品川", "新宿", "武蔵境", ""} in ... は、w駅2に"東京", "品川", "新宿", "武蔵境", ""}のうちどれか1つが束縛されるが、
	traces定義の中では、w駅1が3通り✕ w駅2が5通り = 15通りの組み合わせが生成され、運賃を得る(w駅1, w駅2)が15回実行される。
	*/

end UseFare0
\end{vdm_al}