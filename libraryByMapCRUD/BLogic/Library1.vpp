\section{実行可能な仕様(図書館1)}
	\index{じっこうかのうなしようとしょかん1@実行可能な仕様(図書館1)}
実行不可能な仕様で、事後条件・事前条件・不変条件などを整理した時点で、
構文チェック・型チェックが可能なので、静的な検証は行うことができる。

実際のシステム開発では、日本語による仕様の欠陥より少ないとはいえ、VDM++の実行不可能な陰仕様には多数の欠陥が残る。
そこで、実行可能な仕様を作成することにする。

図書館システムの例では、下記のように、関数や操作の本体に、集合と写像を扱う演算子や、内包表現を使うことにより、
容易に実行可能な陽仕様とすることができる。
	\index{ようしよう@陽仕様}

関数や操作の本体のVDM++による記述は、陰仕様で定義された「仕様」を検証するための記述である。
したがって、設計時や実装時にこの記述をそのまま使う必要はない。
「仕様」は、あくまでも陰仕様で記述された部分である。

ここで、スーパークラスの図書館RDは、図書館のドメイン知識を持つクラスであり、後述する。

\begin{vdm_al}
class 図書館1 is subclass of 図書館RD

values
public v最大蔵書数 = 10000;
public v最大貸出数 = 3;
\end{vdm_al}

\subsection{型定義}

\begin{vdm_al}
types
public 蔵書 = map 蔵書ID to 本
inv w蔵書 == card dom w蔵書 <= v最大蔵書数;
\end{vdm_al}

\subsection{インスタンス変数定義}

\begin{vdm_al}
instance variables
private i蔵書 : 蔵書 := {|->};
private i貸出 : 貸出 := {|->};
inv 蔵書に存在する(dom merge rng i貸出, i蔵書);
\end{vdm_al}

\subsection{操作定義}

\subsubsection{蔵書を追加する}
	\index{ぞうしょをついかする@蔵書を追加する}
\begin{vdm_al}
operations
public 蔵書を追加する : 蔵書ID * 本 ==> ()
蔵書を追加する(a蔵書ID, a本) == 
	i蔵書 := 図書館RD`蔵書を追加する(i蔵書, a蔵書ID, a本);
\end{vdm_al}

\subsubsection{蔵書を削除する}
	\index{ぞうしょをさくじょする@蔵書を削除する}
\begin{vdm_al}
public 蔵書を削除する: set of 蔵書ID ==> ()
蔵書を削除する(anID集合) == 
	i蔵書 := 図書館RD`蔵書を削除する(i蔵書, anID集合)
pre 
	貸出に存在しない(anID集合, i貸出);
\end{vdm_al}

\subsubsection{蔵書を削除する}
	\index{ぞうしょをさくじょする@蔵書を削除する}
\begin{vdm_al}
public 蔵書を削除する: 本 ==> ()
蔵書を削除する(a本) == 
	i蔵書 := 図書館RD`蔵書を削除する(i蔵書, a本)
pre 
	貸出に存在しない(a本, i貸出);
\end{vdm_al}

\subsubsection{題名と著者と分野で本を検索する}
	\index{だいめいとちょしゃとぶんやでほんをけんさくする@題名と著者と分野で本を検索する}
ここでは、写像の内包式
	\index{ないほうしきしゃぞう@内包式(写像)}
で題名と著者と分野のいずれかに一致する蔵書を検索結果として返している。
内包式は集合や列に対しても形式は少し異なるが存在し、ある条件を満たした写像、集合、列のデータを得るのによく使う。

\begin{vdm_al}
public 本を検索する: (題名 | 著者 | 分野) ==> 蔵書
本を検索する(a検索キー) ==  
	return
		{id |-> i蔵書(id) | id in set dom i蔵書 & 
			(i蔵書(id).f題名 = a検索キー or 
			i蔵書(id).f著者 = a検索キー or 
			a検索キー in set i蔵書(id).f分野集合)
		}
pre
	検索キーが空でない(a検索キー)
post
	forall book in set rng RESULT & 
		(book.f題名 = a検索キー or 
		book.f著者 = a検索キー or 
		a検索キー in set book.f分野集合);
\end{vdm_al}

\subsubsection{本を貸す}
	\index{ほんをかす@本を貸す}

\begin{vdm_al}
public 本を貸す: 蔵書 * 利用者 ==> ()
本を貸す(a貸出本, a利用者) == 
	i貸出 := 図書館RD`本を貸す(i貸出, a貸出本, a利用者)
pre
	貸出可能である(a利用者, a貸出本, i貸出, i蔵書, v最大貸出数);
\end{vdm_al}

\subsubsection{本を返す}
	\index{ほんをかえす@本を返す}

\begin{vdm_al}
public 本を返す: set of 蔵書ID * 利用者 ==> ()
本を返す(anID集合, a利用者) ==  
	i貸出 := 図書館RD`本を返す(i貸出, anID集合, a利用者)
pre
	貸出に存在する(anID集合, i貸出);
\end{vdm_al}

\subsubsection{インスタンス変数のアクセッサ}
	\index{いんすたんすへんすうのあくせっさ@インスタンス変数のアクセッサ}
以下の操作は、主に回帰テストケースを記述するのに便利になるよう作成した。

\begin{vdm_al}
public 蔵書を得る : () ==> 蔵書
蔵書を得る() == return i蔵書;

public 貸出を得る : () ==> 貸出
貸出を得る() == return i貸出;
\end{vdm_al}

\begin{vdm_al}
end 図書館1
\end{vdm_al}
