\section {図書館要求辞書}
	\index{としょかんようきゅうじしょ@図書館要求辞書}
図書館のドメイン知識を持つ。

図書館に関する要求辞書の役割も持つ。クラス名に付いているRDは、Requirement Dictionaryの略である。

実行不可能な陰仕様を記述した図書館0クラスで定義されていた、関数群に対応した関数群を持つ。

\begin{vdm_al}
class 図書館RD
\end{vdm_al}

\subsection{型定義}
\begin{vdm_al}
types
public 蔵書 = map 蔵書ID to 本;
public 本 ::
	f題名 : 題名
	f著者 : 著者
	f分野集合 : set of 分野;
public 題名 = seq of char;
public 著者 = seq of char;
public 分野 = seq of char;
public 蔵書ID = token;
public 職員 = token ;
public 利用者 = token;
public 貸出 = inmap 利用者 to 蔵書;
\end{vdm_al}

\subsection{関数定義}

\subsubsection{蔵書を追加する}
	\index{ぞうしょをついかする@蔵書を追加する}
\begin{vdm_al}
functions
public 蔵書を追加する : 蔵書 * 蔵書ID * 本 -> 蔵書
蔵書を追加する(a蔵書, a蔵書ID, a本) == 
	CRUD_MAP`CreateMap1[蔵書ID, 本](a蔵書, a蔵書ID, a本);
\end{vdm_al}

\subsubsection{蔵書を削除する}
	\index{ぞうしょをさくじょする@蔵書を削除する}
\begin{vdm_al}
public 蔵書を削除する: 蔵書 * set of 蔵書ID -> 蔵書 
蔵書を削除する(a蔵書, anID集合) == 
	CRUD_MAP`DeleteMapRestricToDom[蔵書ID, 本](a蔵書, anID集合);
\end{vdm_al}

\subsubsection{蔵書を削除する}
	\index{ぞうしょをさくじょする@蔵書を削除する}
\begin{vdm_al}
public 蔵書を削除する: 蔵書 * 本 -> 蔵書
蔵書を削除する(a蔵書, a本) == 
	CRUD_MAP`DeleteMapRestricToRng[蔵書ID, 本](a蔵書, {a本});
\end{vdm_al}

\subsubsection{本を貸す}
	\index{ほんをかす@本を貸す}
利用者がすでに本を借りている場合と、初めて借りる場合で、処理が異なる。

すでに借りている場合は、貸出の写像を上書きし、
まだ借りていない場合は、貸出の写像に追加する。

初めて借りる場合は、単純に利用者と貸出本の写を、従来の貸出写像に munion
	\index{munion}
演算子を使って併合する。

\begin{vdm_al}
public 本を貸す: 貸出 * 蔵書 * 利用者-> 貸出
本を貸す(a貸出, a貸出本, a利用者) == 
	if a利用者 in set dom a貸出 then
		CRUD_MAP`UpdateMap[利用者, 蔵書](a貸出, a利用者, a貸出(a利用者) munion a貸出本)
	else
		CRUD_MAP`CreateMap1[利用者, 蔵書](a貸出, a利用者, a貸出本);
\end{vdm_al}

\subsubsection{本を返す}
貸出情報から、返却する蔵書に関するデータを削除する。

貸出が残っている利用者の蔵書は貸出に上書きし、貸出が残っていない利用者の情報は貸出から削除する。

\begin{vdm_al}
public 本を返す: 貸出 * set of 蔵書ID * 利用者 -> 貸出
本を返す(a貸出, anID集合, a利用者) ==  
	let w利用者への貸出本new = CRUD_MAP`DeleteMapRestricToDom[蔵書ID, 本](a貸出(a利用者), anID集合) in
	if w利用者への貸出本new = {|->} then
		CRUD_MAP`DeleteMapRestricToDom[利用者, 蔵書](a貸出, {a利用者})
	else
		CRUD_MAP`UpdateMap[利用者, 蔵書](a貸出, a利用者, w利用者への貸出本new);
\end{vdm_al}

\subsubsection{蔵書の状態に関する関数}
	\index{ぞうしょのじょうたいにかんするかんすう@蔵書の状態に関する関数}
\begin{vdm_al}
public 蔵書に存在する : set of 蔵書ID * 蔵書 +> bool
蔵書に存在する(anID集合, a図書館蔵書) ==
	if anID集合 = {} then true
	else exists id in set anID集合 & id in set dom a図書館蔵書;
\end{vdm_al}

\begin{vdm_al}
public 貸出に存在する : set of 蔵書ID * 貸出 +> bool
貸出に存在する(anID集合, a貸出) == 
	let	w蔵書 = merge rng a貸出 in
	exists id in set anID集合 & id in set dom w蔵書;
\end{vdm_al}

\begin{vdm_al}
public 貸出に存在する : 本 * 貸出 +> bool
貸出に存在する(a本, a貸出) == 
	let	w蔵書 = merge rng a貸出 in
	a本 in set rng w蔵書;
\end{vdm_al}

\begin{vdm_al}
public 貸出に存在しない : set of 蔵書ID * 貸出 +> bool
貸出に存在しない(anID集合, a貸出) ==
	not 貸出に存在する(anID集合, a貸出);
\end{vdm_al}

\begin{vdm_al}
public 貸出に存在しない : 本 * 貸出 +> bool
貸出に存在しない(a本, a貸出) ==
	not 貸出に存在する(a本, a貸出);
\end{vdm_al}

\begin{vdm_al}
public 貸出可能である : 利用者 * 蔵書 * 貸出 * 蔵書 * nat1 +> bool
貸出可能である(a利用者, a貸出本, a貸出, a図書館蔵書, a最大貸出数) ==
	蔵書に存在する(dom a貸出本, a図書館蔵書) and
	貸出に存在しない(dom a貸出本, a貸出) and
	最大貸出数を超えていない(a利用者, a貸出本, a貸出, a最大貸出数);
\end{vdm_al}

\subsubsection{最大貸出数を超えていない}
		\index{さいだいかしだしすうをこえていない@最大貸出数を超えていない}
\begin{vdm_al}
public 最大貸出数を超えていない : 利用者 * 蔵書 * 貸出 * nat1  +> bool
最大貸出数を超えていない(a利用者, a貸出本, a貸出, a最大貸出数) ==
	if a利用者 not in set dom a貸出 then
		card dom a貸出本 <= a最大貸出数
	else
		card dom a貸出(a利用者) + card dom a貸出本 <= a最大貸出数;
\end{vdm_al}

\subsubsection{蔵書の検索に関する関数}
		\index{ぞうしょのけんさくにかんするかんすう@蔵書の検索に関する関数}
\begin{vdm_al}
public 検索キーが空でない : 題名 | 著者 | 分野 +> bool
検索キーが空でない(a検索キー) == a検索キー <> "";
\end{vdm_al}

\begin{vdm_al}
end 図書館RD
\end{vdm_al}
