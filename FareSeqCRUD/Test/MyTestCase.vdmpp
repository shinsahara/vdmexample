\section {回帰テストケース}
\subsection {責任}
「運賃を得る」クラス、及び関連するクラスをテストする。

\begin{vdm_al}
class TestCaseT  is subclass of TestCase, 鉄道ネットデータ

values
public v最大値 = 1E8;

instance variables
--public s路線検索 : 路線検索 := new ダイクストラ算法による路線検索(v駅集合, v路線集合, v路線単位集合);
public s路線検索 : 路線検索 := new ダイクストラ算法による路線検索(v駅集合, v路線単位集合);
public s運賃を得る : 運賃を得る := 
	new 運賃を得る([
			mk_運賃表辞書`行(0,1,150),
			mk_運賃表辞書`行(1,3,160),
			mk_運賃表辞書`行(3,6,190),
			mk_運賃表辞書`行(6,10,220),
			mk_運賃表辞書`行(10,15,250),
			mk_運賃表辞書`行(15,v最大値,300)
			],
			v駅集合,
			--v路線集合,
			v路線単位集合);

operations
public print : seq of char ==> ()
print(s) == 
	let - = new IO().echo(s) in skip;

end TestCaseT

class TestCaseT0001 is subclass of TestCaseT

operations
public test01: () ==> ()
test01 () == (
	def wDistance = 
			s路線検索.最短距離(v東京, v新宿)
	in
	assertTrue("\t test01 計算結果が間違っている\n",
		wDistance = 7.7 and
  	s運賃を得る.適用する(v東京, v新宿) = 220
	)
);

public test02: () ==> ()
test02 () == (
	def wDistance = 
			s路線検索.最短距離(v四ツ谷, v品川)
	in
	assertTrue("\t test02 計算結果が間違っている。\n",	
		wDistance = 9.5 and
  	s運賃を得る.適用する(v四ツ谷, v品川) = 220
	)
);

public test03: () ==> ()
test03 () == (
	assertTrue("\t test03 計算結果が間違っている。\n",	
	let mk_(w最短経路, w最短距離) = s路線検索.最短経路(v池袋, v品川) in
		w最短経路 = [mk_token("池袋"), mk_token("新宿"), mk_token("品川")] and
		w最短距離 = 14.9
	)
);

public testE01: () ==> ()
testE01 () == (
	trap  <到着駅が直前の駅の中に存在しない>  with
		print("\t testE01 期待した事前条件エラーを検出した。\n") in (
	def - = 
		s路線検索.最短距離(v東京, v東京) 
	in
		print("\t testE01 予想外のエラーに遭遇。\n")
	)
);

public testE02: () ==> ()
testE02 () == (
	trap  <到着駅が直前の駅の中に存在しない>  with
		print("\t testE02 期待した事前条件エラーを検出した。\n") in (
	def - = 
		s路線検索.最短距離(v東京, vコペンハーゲン) 
	in
		print("\t testE02 予想外のエラーに遭遇。\n")
	)
);

end TestCaseT0001
\end{vdm_al}