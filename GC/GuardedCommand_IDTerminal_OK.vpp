\section{ガードコマンド\_ID端末\_OK}
ID端末アルファまたはベータで、利用者の認証が可だった場合のガードコマンド。

\begin{vdm_al}
class ガードコマンド_ID端末_OK is subclass of ガードコマンド_ID端末

operations
public ガードコマンド_ID端末_OK : ID端末 ==> ガードコマンド_ID端末_OK
ガードコマンド_ID端末_OK(anID端末) == (
	sID端末 := anID端末
);
\end{vdm_al}

\subsection{ガードコマンド\_ID端末\_OKのcheck}
ID端末が利用不可能で、かつIDカードが正規の物であるならば、ドアを解錠し、ID端末利用可能にする。

\begin{vdm_al}
public check : 黒板 ==> ()
check (a大域黒板) == (
	def mk_(w黒板属性DB, w更新黒板属性DB) = a大域黒板.得る() in
	s局所黒板.全属性を設定する(w黒板属性DB, w更新黒板属性DB);
	def mk_(w黒板属性DB, -) = s局所黒板.得る();
		w位置 = sID端末.位置を得る();
		wID端末DB = w黒板属性DB(mk_token("ID端末"));
		wID端末 = wID端末DB(w位置);
		w仮想移動する利用者 = wID端末.s利用者;
		wドアDB : map ドア`ドア位置 to ドア`ドア型 = w黒板属性DB(mk_token("ドア"));
		{mk_(f, t)} = {mk_(f, t) | mk_(f, t) in set dom wドアDB & f = w位置};
		w開くべきドア =  wドアDB(mk_(f, t))
	in (
	if wID端末.利用不可能である() and wID端末.正当な利用者から認証依頼された() and w開くべきドア.施錠されている() then (
		dcl w更新ID端末 : ID端末 := wID端末.コピーする(w位置);
		dcl w更新開くべきドア : ドア := w開くべきドア.コピーする(mk_(f, t));
		w更新開くべきドア.解錠する();
		w更新ID端末.利用可能にする();
		s局所黒板.更新黒板属性を設定する(mk_token("ドア"), {mk_(f, t) |-> w更新開くべきドア});
		s局所黒板.更新黒板属性を設定する(mk_token("ID端末"), {w更新ID端末.位置を得る() |-> w更新ID端末});
		def - = debug >= 5 => new IO().echo(
			"\n利用者が、解錠しました。" ^
			VDMUtil`val2seq_of_char[利用者 * 場所グラフ`場所ID * 場所グラフ`場所ID]
				(mk_(w仮想移動する利用者, f, t)) ^
			"\n") 
		in skip
	) -- if
	) --def in
);
\end{vdm_al}

\subsection{ガードコマンド\_ID端末\_OKのupdate}
局所黒板のドアDBとID端末DBとを大域黒板に設定する。

\begin{vdm_al}
public update : 黒板 ==> ()
update(a大域黒板) == 
	def w更新黒板属性DB = s局所黒板.更新黒板属性を得る();
		wドアDB = w更新黒板属性DB(mk_token("ドア"));
		wID端末DB = w更新黒板属性DB(mk_token("ID端末"))
	in (
	a大域黒板.設定する(mk_token("ドア"), wドアDB);
	a大域黒板.設定する(mk_token("ID端末"), wID端末DB);
);

end ガードコマンド_ID端末_OK
\end{vdm_al}

\begin{rtinfo}
{vdm.tc}[ガードコマンド_ID端末_OK]
\end{rtinfo}