\section{ガードコマンド\_利用者\_ドアを開ける}
利用者がドアを開けるガードコマンド。

\begin{vdm_al}
class ガードコマンド_利用者_ドアを開ける is subclass of ガードコマンド_利用者

operations
public ガードコマンド_利用者_ドアを開ける : 場所グラフ`場所ID ==> ガードコマンド_利用者_ドアを開ける
ガードコマンド_利用者_ドアを開ける(a場所ID) == (
	s場所ID := a場所ID
);
\end{vdm_al}

\subsection{ガードコマンド\_利用者\_ドアを開ける、のcheck}
移動先へのドアが解錠されているならば、ドアを開ける。

ドアを開けた結果は、局所黒板の更新黒板属性に設定する。

\begin{vdm_al}
public check : 黒板 ==> ()
check (a大域黒板) == (
	def mk_(w黒板属性DB, w更新黒板属性DB) = a大域黒板.得る() in
	s局所黒板.全属性を設定する(w黒板属性DB, w更新黒板属性DB);
	def mk_(w黒板属性DB, -) = s局所黒板.得る();
			w場所グラフ = s局所黒板.s場所グラフ;
			w利用者のいる場所DB = w黒板属性DB(mk_token("実際の利用者居場所"));
			w利用者の居場所ID = s場所ID;
			w利用者集合 = dom (w利用者のいる場所DB :> {w利用者の居場所ID}); --この場所(w利用者の居場所ID)にいる利用者の集合
			移動可能場所集合 = w場所グラフ.移動可能場所を得る(s場所ID);
			{w利用者の移動先場所ID} = 移動可能場所集合;
			wドア位置 = mk_(w利用者の居場所ID, w利用者の移動先場所ID);
			wドアDB : map ドア`ドア位置 to ドア`ドア型 = w黒板属性DB(mk_token("ドア"));
			w開くべきドア =  wドアDB(wドア位置)
	in (
	if w利用者集合 = {} then return;
	let {w利用者} = w利用者集合 in
	if w開くべきドア.解錠されている() and w開くべきドア.閉まっている() then (
		dcl w更新開くべきドア : ドア := w開くべきドア.コピーする(wドア位置);
		w更新開くべきドア.開ける();
		s局所黒板.更新黒板属性を設定する(mk_token("ドア"), {mk_(w利用者の居場所ID, w利用者の移動先場所ID) |-> w更新開くべきドア});
		def - = debug >= 5 => new IO().echo(
			"\n利用者が、ドアを開けました。" ^
			VDMUtil`val2seq_of_char[利用者 * 場所グラフ`場所ID * 場所グラフ`場所ID]
				(mk_(w利用者, w利用者の居場所ID, w利用者の移動先場所ID)) ^
			"\n")
		in skip
	) -- if
	) --def in
)
pre
	let mk_(w黒板属性DB, -) = a大域黒板.得る(),
		w場所グラフ = s局所黒板.s場所グラフ,
		移動可能場所集合 = w場所グラフ.移動可能場所を得る(s場所ID),
		w利用者のいる場所DB = w黒板属性DB(mk_token("実際の利用者居場所")),
		w利用者の居場所ID = s場所ID,
		w利用者集合 = dom (w利用者のいる場所DB :> {w利用者の居場所ID}) --この場所(w利用者の居場所ID)にいる利用者の集合
	in
	card 移動可能場所集合 = 1 and
	card w利用者集合 in set {0, 1}; --ドアがあるところは、定員１である
\end{vdm_al}

\subsection{ガードコマンド\_利用者\_ドアを開ける、のupdate}
局所黒板の利用者の居る場所DBを大域黒板に設定する。

\begin{vdm_al}
public update : 黒板 ==> ()
update(a大域黒板) == 
	def w更新黒板属性DB = s局所黒板.更新黒板属性を得る();
		wドアDB = w更新黒板属性DB(mk_token("ドア"))
	in (
	a大域黒板.設定する(mk_token("ドア"), wドアDB);
);

end ガードコマンド_利用者_ドアを開ける
\end{vdm_al}

\begin{rtinfo}
{vdm.tc}[ガードコマンド_利用者_ドアを開ける]
\end{rtinfo}