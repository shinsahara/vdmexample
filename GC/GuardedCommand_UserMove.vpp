\section{ガードコマンド\_利用者案内無し移動クラス}
利用者が案内されずに移動するガードコマンド。

\begin{vdm_al}
class ガードコマンド_利用者案内無し移動 is subclass of ガードコマンド_利用者

operations
public ガードコマンド_利用者案内無し移動 : 場所グラフ`場所ID ==> ガードコマンド_利用者案内無し移動
ガードコマンド_利用者案内無し移動(a場所ID) == (
	s場所ID := a場所ID
);
\end{vdm_al}

\subsection{ガードコマンド\_利用者案内無し移動のcheck}
場所に案内表示装置が無ければ、移動可能な場所の一つに移動する。
この場合の、ある時間、移動しないことがあり得る。

移動結果は、局所黒板の更新黒板属性に設定する。

\begin{vdm_al}
public check : 黒板 ==> ()
check (a大域黒板) == (
	def mk_(w黒板属性DB, w更新黒板属性DB) = a大域黒板.得る() in
	s局所黒板.全属性を設定する(w黒板属性DB, w更新黒板属性DB);
	def mk_(w黒板属性DB, -) = s局所黒板.得る();
		w場所グラフ = s局所黒板.s場所グラフ;
		移動可能場所集合 = w場所グラフ.移動可能場所を得る(s場所ID);
		w利用者のいる場所DB = w黒板属性DB(mk_token("実際の利用者居場所"));
		w利用者の居場所ID = s場所ID;
		w利用者集合 = dom (w利用者のいる場所DB :> {w利用者の居場所ID}) --この場所(w利用者の居場所ID)にいる利用者の集合
	in (
	if w利用者集合 = {} then return;
	let w利用者の移動先場所ID = w場所グラフ.気まぐれに次の移動場所を得る(移動可能場所集合) in
	def
		w移動する利用者 = 利用者`到着時間が一番早い利用者を選ぶ(w利用者集合);
		wドア位置 = mk_(w利用者の居場所ID, w利用者の移動先場所ID);
		wドアDB = w黒板属性DB(mk_token("ドア"));
		w開くべきドア =  wドアDB(wドア位置)
	in (
	if	not w場所グラフ.案内表示装置がある(w利用者の居場所ID) and
		w開くべきドア.通過可能である() and 
		w場所グラフ.利用者が移動可能である(w利用者のいる場所DB, w利用者の移動先場所ID) and 
		w移動する利用者.移動する気になった時間である()
	then (
		ある場所の利用者を次の場所へ移動させる(
			w利用者のいる場所DB, w移動する利用者, w利用者の居場所ID, w利用者の移動先場所ID,
			"実際の利用者居場所", "ガードコマンド_利用者案内無し移動","利用者が、移動しました。");
	) -- if
	) -- def in
	) -- def in
);

end ガードコマンド_利用者案内無し移動
\end{vdm_al}

\begin{rtinfo}
{vdm.tc}[ガードコマンド_利用者案内無し移動]
\end{rtinfo}