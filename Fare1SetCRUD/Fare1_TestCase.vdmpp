\section {Testクラス}
\index{てすと@Test}
運賃の回帰テストケースである。

エラーケースを、一部考慮している。

\begin{vdm_al}
class MyTestCase is subclass of TestCase

instance variables
public s運賃 : 運賃 := new 運賃({
	mk_運賃`運賃レコード("東京", "品川", 220),
	mk_運賃`運賃レコード("東京", "新宿", 180),
	mk_運賃`運賃レコード("東京", "四谷", 150),
	mk_運賃`運賃レコード("四谷", "新宿", 130),
	mk_運賃`運賃レコード("新宿", "品川", 190),
	mk_運賃`運賃レコード("品川", "新宿", 170)
	});

operations
public test01 : () ==> ()
test01() == (
	assertTrue("test01 東京・品川の運賃がおかしい。",
		s運賃.運賃を得る("東京", "品川") = 220
	);
	assertTrue("test01 東京・品川の運賃がおかしい。",
		s運賃.運賃を得る("東京", "新宿") = 180
	);
	assertTrue("test01 東京・四谷の運賃がおかしい。",
		s運賃.運賃を得る("東京", "四谷") = 150
	);
	assertTrue("test01 東京・品川の運賃がおかしい。",
		s運賃.運賃を得る("新宿", "品川") = 190
	);
	assertTrue("test01 東京・品川の運賃がおかしい。",
		s運賃.運賃を得る("新宿", "品川") = 190
	);	
	s運賃.運賃レコードを追加する(mk_運賃`運賃レコード("東京", "大阪", 13000));
	assertTrue("test01 東京・大阪の運賃がおかしい。",
		s運賃.運賃を得る("東京", "大阪") = 13000
	);	
	assertTrue("test01 1000円以上の運賃レコードの抽出がおかしい。",
		let w運賃集合 = s運賃.運賃集合を得る(),
				r運賃集合 = s運賃.運賃レコード集合を得る(lambda e : 運賃`運賃レコード & e.f運賃 > 1000)(w運賃集合)
		in r運賃集合 = {mk_運賃`運賃レコード("東京", "大阪", 13000)}
	);	
	assertTrue("test01 東京・大阪の運賃がおかしい。",
		s運賃.運賃を得る("東京", "大阪") = 13000
	);
	assertTrue("test01 東京・大阪の運賃がおかしい。",
		let w運賃集合 = s運賃.運賃レコードを更新する(mk_運賃`運賃レコード("新宿", "品川", 190), mk_運賃`運賃レコード("新宿", "品川", 290)) in
		mk_運賃`運賃レコード("新宿", "品川", 290) in set w運賃集合
	);
);
\end{vdm_al}

\subsection {エラー処理をテストするテストケースt4}
\index{えらしよりをてすと@エラー処理をテスト}
\index{れいかいしより@例外処理}
運賃レコードがtestE01で追加したものと重複したため、例外\texttt{<運賃データの重複>}が発生することを確認している。

\begin{vdm_al}
public testE01 : () ==> bool
testE01() == (
	trap <運賃データの重複> with return true in
	--trap <RuntimeError> with return true in
	s運賃.運賃レコードを追加する(mk_運賃`運賃レコード("新宿", "品川", 290));
	return false
);
  	
end MyTestCase
\end{vdm_al}

\begin{rtinfo}
{vdm.tc}[MyTestCase]
\end{rtinfo}