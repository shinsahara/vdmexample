\section {Testクラス}
\index{てすと@Test}
運賃計算検証用の単純な回帰テストケースである。

実用システムではVDM++用の回帰テストライブラリを使用するが、入門段階では説明しない。

エラーケースは、まだ考慮していない。

\begin{vdm_al}
class Test is subclass of 運賃計算 --Testクラスが運賃計算クラスのサブクラスであることを示す。

values --定数の定義
v運賃レコード集合 : 運賃表集合 = { --定数「v運賃レコード集合」が運賃表集合型で、値が右辺の運賃レコードの集合であることを示す。
	mk_運賃レコード("東京", "品川", 220), --「mk_運賃レコード」は運賃レコード型のデータのインスタンスを作る。
	mk_運賃レコード("東京", "新宿", 180),
	mk_運賃レコード("新宿", "品川", 190)
};

operations
public run : () ==> seq1 of bool --簡易回帰テストを行う操作。結果をbool型の列で返す。seq1は空列にはならない列型を示す。
run() == 
	return [t1(), t2(), t3(), t4()]; -- 回帰テストがうまくいけば、[true, true, true]を返す。回帰テストのn番目にエラーがあれば、n番目の返り値がfalseになる。
	                           -- 例えば、2番目のテストケースがエラーだと、[true, false, true]を返す。

operations
public t1 : () ==> bool --1番目の回帰テストケースの操作。うまく行ったか否かをbool型で返す。
t1() == ( -- '('から')'までが1つのブロック分で、複数の文を記述できる。今は、1つのdef文が記述されていて、その中に、return文が記述されている。
	let w運賃計算 = new 運賃計算(v運賃レコード集合) in -- let式の中で、v運賃レコード集合を持った運賃計算オブジェクトを生成し、w運賃計算に束縛する。
	return w運賃計算.運賃を得る("東京", "品川")  = 220 -- w運賃計算の「運賃を得る」をcallし、結果が220であればtrueをreturn文で返す。
);

public t2 : () ==> bool
t2() == (
	let w運賃計算 = new 運賃計算(v運賃レコード集合) in
	return w運賃計算.運賃を得る("東京", "新宿") = 180
);

public t3 : () ==> bool
t3() == (
	let w運賃計算 = new 運賃計算(v運賃レコード集合) in
	return w運賃計算.運賃を得る("新宿", "品川")  = 190
);

public t4 : () ==> bool
t4() == (
	let w運賃計算 = new 運賃計算(v運賃レコード集合) in
	trap <運賃表に存在しない> with return true in -- このtrap文は、in以下のreturn文で <運賃表に存在しない>というパターンに一致する例外が発生したら、trueを返す。
	return w運賃計算.運賃を得る("ソウル", "釜山")  = 190
);

public Tr1 : 駅 * 駅 ==> bool
Tr1(a駅1, a駅2) ==(
	let w運賃計算 = new 運賃計算(v運賃レコード集合) in
	trap <運賃表に存在しない> with return true in -- このtrap文は、in以下のreturn文で <運賃表に存在しない>というパターンに一致する例外が発生したら、trueを返す。
	return w運賃計算.運賃を得る(a駅1, a駅2)  = 190
);
  	
end Test
\end{vdm_al}

\begin{rtinfo}
{vdm.tc}[Test]
\end{rtinfo}